import { connect } from 'cloudflare:sockets';

let userID = 'ddcd5b4d-8560-4d5e-96b3-2c16a34f0bbb'; 
let proxyIP = 'proxyip.us.cmliussss.net';

const RACE_ENABLED = true; 
const RACE_DELAY_MS = 350; 
const MAX_EARLY_BUFFER_BYTES = 64 * 1024; 
const COALESCE_HEADER = false; 

const preferredDomains = [
    'store.ubi.com',
    'ip.sb',
    'mfa.gov.ua',
    'shopify.com',
    'cloudflare-dl.byoip.top',
    'staticdelivery.nexusmods.com',
    'www.visa.cn',
    'cf.090227.xyz',
    'cf.zhetengsha.eu.org',
    'baipiao.cmliussss.abrdns.com',
    'saas.sin.fan',
    'cf.877774.xyz',
    'snipaste5.speedip.eu.org',
    'www.shopify.com',
    'openai.com',
    'japan.com',
    'icook.tw',
    'icook.hk',
    'time.is',
];

let proxyConfig = { proxyHost: '', proxyPort: null };
function parseProxyIP(inputProxyIP) {
    proxyConfig = { proxyHost: '', proxyPort: null };
    if (!inputProxyIP) return;
    const parts = inputProxyIP.split(':');
    proxyConfig.proxyHost = parts[0].trim();
    if (parts.length > 1) {
        const p = parseInt(parts[1].trim(), 10);
        if (!isNaN(p) && p > 0 && p <= 65535) proxyConfig.proxyPort = p;
    }
}

function extractProxyFromPath(pathname) {
    const m = /^\/proxyip=([^/]+)(?:\/.*)?$/.exec(pathname);
    return m ? m[1] : null;
}
function getEffectiveProxyIP(url) {
    const fromQuery = (url.searchParams.get('proxyip') || '').trim();
    const fromPath = extractProxyFromPath(url.pathname);
    return fromQuery || fromPath || proxyIP;
}

function concatArrayBuffers(...arrays) {
    const total = arrays.reduce((sum, a) => sum + a.byteLength, 0);
    const tmp = new Uint8Array(total);
    let offset = 0;
    for (const a of arrays) {
        tmp.set(new Uint8Array(a), offset);
        offset += a.byteLength;
    }
    return tmp.buffer;
}

function base64ToArrayBuffer(base64Str) {
    if (!base64Str) return { error: null };
    try {
        const b64 = base64Str.replace(/-/g, '+').replace(/_/g, '/');
        const dec = atob(b64);
        const u8 = Uint8Array.from(dec, c => c.charCodeAt(0));
        return { earlyData: u8.buffer, error: null };
    } catch (e) {
        return { error: e };
    }
}

const TEXT_DECODER = new TextDecoder();

function isValidUUID(uuid) {
    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[4][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
    return uuidRegex.test(uuid);
}
const byteToHex = [];
for (let i = 0; i < 256; ++i) byteToHex.push((i + 256).toString(16).slice(1));
function unsafeStringify(arr, offset = 0) {
    return (
        byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" +
        byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" +
        byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" +
        byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" +
        byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] +
        byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]
    ).toLowerCase();
}
function stringify(arr, offset = 0) {
    const uuid = unsafeStringify(arr, offset);
    if (!isValidUUID(uuid)) throw TypeError('Stringified UUID is invalid');
    return uuid;
}

function getVLConfig(userID, currentHost, proxyHostPort) {
    const protocol = atob(atob('ZG14bGMzTT0='));
    const path = `/proxyip=${proxyHostPort}`;
    const params = new URLSearchParams({
        encryption: 'none',
        security: 'tls',
        sni: currentHost,
        fp: 'chrome',
        type: 'ws',
        host: currentHost,
        path: path,
        mux: '1',
        alpn: 'http/1.1',
    });

    const allVlUris = preferredDomains.map((domain, idx) => {
        const alias = `T-SNIP_${String(idx + 1).padStart(2, '0')}`;
        return `${protocol}://${userID}@${domain}:443?${params.toString()}#${alias}`;
    });

    const sub = allVlUris.join('\n');
    return btoa(sub).replace(/\+/g, '-').replace(/\//g, '_');
}

if (!isValidUUID(userID)) {
    throw new Error('uuid is not valid');
}

export default {
    async fetch(request, env, ctx) {
        try {
            const url = new URL(request.url);
			
            const effectiveProxyIP = getEffectiveProxyIP(url);
            parseProxyIP(effectiveProxyIP);

            let pathUUID = null;
            const pm = /^\/proxyip=([^/]+)(?:\/([0-9a-f-]{36}))?$/.exec(url.pathname);
            if (pm && pm[2]) {
                pathUUID = pm[2];
            } else if (url.pathname.length > 1) {
                pathUUID = url.pathname.substring(1);
            }

            const upgradeHeader = request.headers.get('Upgrade');
            if (!upgradeHeader || upgradeHeader !== 'websocket') {
                if (url.pathname === '/') {
                    return new Response('恭喜你', {
                        status: 200,
                        headers: { 'Content-Type': 'text/plain;charset=utf-8' },
                    });
                }
                if (pathUUID && pathUUID === userID) {
                    const cfg = getVLConfig(pathUUID, request.headers.get('Host'), effectiveProxyIP);
                    return new Response(cfg, {
                        status: 200,
                        headers: { 'Content-Type': 'text/plain;charset=utf-8' },
                    });
                }
                return new Response('请填写正确的 UUID', {
                    status: 400,
                    headers: { 'Content-Type': 'text/plain;charset=utf-8' },
                });
            }

            return await vlOverWSHandler(request);
        } catch (err) {
            return new Response(err.toString(), {
                status: 500,
                headers: { 'Content-Type': 'text/plain;charset=utf-8' },
            });
        }
    },
};

async function vlOverWSHandler(request) {
    const url = new URL(request.url);
    const effProxy = getEffectiveProxyIP(url);
    parseProxyIP(effProxy);

    const pair = new WebSocketPair();
    const [client, server] = Object.values(pair);
    server.accept();

    const earlyDataHeader = request.headers.get('sec-websocket-protocol') || '';
    const readableWS = makeReadableWebSocketStream(server, earlyDataHeader);

    const remote = {
        value: null,
        writer: null,
        ready: false,
        started: false,
        earlyBuf: [],
        earlyBytes: 0,
    };
    let udpWrite = null;
    let isDns = false;

    readableWS.pipeTo(new WritableStream({
        async write(chunk) {
            if (isDns && udpWrite) {
                udpWrite(chunk);
                return;
            }

            if (remote.ready && remote.writer) {
                await remote.writer.write(chunk);
                return;
            }

            if (!remote.started) {
                const {
                    hasError,
                    message,
                    portRemote = 443,
                    addressRemote = '',
                    rawDataIndex,
                    vlVersion = new Uint8Array([0, 0]),
                    isUDP,
                } = processVlHeader(chunk, userID);
                if (hasError) throw new Error(message);

                if (isUDP) {
                    if (portRemote === 53) {
                        isDns = true;
                    } else {
                        throw new Error('UDP proxy only enable for DNS which is port 53');
                    }
                }

                const vlRespHeader = new Uint8Array([vlVersion[0], 0]);
                const rawClient = chunk.slice(rawDataIndex);

                if (isDns) {
                    const { write } = await handleUDPOutBound(server, vlRespHeader);
                    udpWrite = write;
                    udpWrite(rawClient);
                    remote.started = true;
                    return;
                }

                handleTCPOutBoundOptimized(remote, addressRemote, portRemote, rawClient, server, vlRespHeader);
                remote.started = true;
                return;
            }

            if (remote.earlyBytes + chunk.byteLength <= MAX_EARLY_BUFFER_BYTES) {
                remote.earlyBuf.push(chunk);
                remote.earlyBytes += chunk.byteLength;
            } else {
                if (remote.writer) {
                    await remote.writer.write(chunk);
                } else {
                }
            }
        },
    })).catch(() => { /* 流已在内部处理 */ });

    return new Response(null, { status: 101, webSocket: client });
}

function makeReadableWebSocketStream(ws, earlyDataHeader) {
    let cancelled = false;
    const { earlyData } = base64ToArrayBuffer(earlyDataHeader);

    return new ReadableStream({
        start(controller) {
            if (earlyData) controller.enqueue(new Uint8Array(earlyData));

            ws.addEventListener('message', e => {
                if (cancelled) return;
                controller.enqueue(e.data);
            });
            ws.addEventListener('close', () => {
                safeCloseWebSocket(ws);
                if (!cancelled) controller.close();
            });
            ws.addEventListener('error', err => controller.error(err));
        },
        cancel() {
            cancelled = true;
            safeCloseWebSocket(ws);
        },
    });
}

function processVlHeader(buf, userID) {
    try {
        if (buf.byteLength < 24) throw new Error('invalid data');

        const version = new Uint8Array(buf.slice(0, 1));
        const uuidStr = stringify(new Uint8Array(buf.slice(1, 17)));
        if (uuidStr !== userID.toLowerCase()) throw new Error('invalid user');

        const optLen = new Uint8Array(buf.slice(17, 18))[0];
        const cmdIdx = 18 + optLen;
        const cmd = new Uint8Array(buf.slice(cmdIdx, cmdIdx + 1))[0];
        const isUDP = cmd === 2;
        if (cmd !== 1 && !isUDP) throw new Error(`unsupported command ${cmd}`);

        const portIdx = cmdIdx + 1;
        if (buf.byteLength < portIdx + 2) throw new Error('missing port');
        const port = new DataView(buf.slice(portIdx, portIdx + 2)).getUint16(0);

        let addrIdx = portIdx + 2;
        if (buf.byteLength < addrIdx + 1) throw new Error('missing address type');
        const addrType = new Uint8Array(buf.slice(addrIdx, addrIdx + 1))[0];
        addrIdx += 1;

        let addr = '', addrLen = 0;
        switch (addrType) {
            case 1: // IPv4
                addrLen = 4;
                if (buf.byteLength < addrIdx + addrLen) throw new Error('incomplete IPv4');
                addr = new Uint8Array(buf.slice(addrIdx, addrIdx + addrLen)).join('.');
                break;
            case 2: // Domain
                addrLen = new Uint8Array(buf.slice(addrIdx, addrIdx + 1))[0];
                addrIdx += 1;
                if (buf.byteLength < addrIdx + addrLen) throw new Error('incomplete domain');
                addr = TEXT_DECODER.decode(buf.slice(addrIdx, addrIdx + addrLen));
                break;
            case 3: // IPv6
                addrLen = 16;
                if (buf.byteLength < addrIdx + addrLen) throw new Error('incomplete IPv6');
                const dv = new DataView(buf.slice(addrIdx, addrIdx + addrLen));
                const parts = [];
                for (let i = 0; i < 8; i++) parts.push(dv.getUint16(i * 2).toString(16));
                addr = parts.join(':');
                break;
            default:
                throw new Error(`invalid addressType ${addrType}`);
        }

        const rawIdx = addrIdx + addrLen;
        return {
            hasError: false,
            addressRemote: addr,
            portRemote: port,
            rawDataIndex: rawIdx,
            vlVersion: version,
            isUDP,
        };
    } catch (e) {
        return { hasError: true, message: e.message };
    }
}

async function handleTCPOutBoundOptimized(remote, address, port, initData, ws, vlHeader) {
    if (remote._active) return;
    remote._active = true;

    let selected = null; 
    let directSock = null;
    let proxySock = null;
    let fallbackTimer = null;
    let headerSent = false;
    let closed = false;

    function clearFallbackTimer() {
        if (fallbackTimer) { try { clearTimeout(fallbackTimer); } catch {} fallbackTimer = null; }
    }
    function sendHeaderIfNeeded() {
        if (!headerSent) {
            if (COALESCE_HEADER) {
            } else {
                ws.send(vlHeader); 
            }
            headerSent = true;
        }
    }
    function sendToWS(chunk) {
        if (ws.readyState !== WS_READY_STATE_OPEN) throw new Error('WebSocket not open');
        if (COALESCE_HEADER && !headerSent) {
            ws.send(concatArrayBuffers(vlHeader, chunk));
            headerSent = true;
        } else {
            if (!headerSent) sendHeaderIfNeeded();
            ws.send(chunk);
        }
    }
    async function becomeWinner(sock, label) {
        selected = label;
        clearFallbackTimer();

        try { if (label === 'direct' && proxySock) proxySock.close(); } catch {}
        try { if (label === 'proxy' && directSock) directSock.close(); } catch {}

        remote.value = sock;
        remote.writer = sock.writable.getWriter();
        if (remote.earlyBuf.length) {
            for (const buf of remote.earlyBuf) {
                await remote.writer.write(buf);
            }
            remote.earlyBuf.length = 0;
            remote.earlyBytes = 0;
        }
        remote.ready = true;
    }
    async function startReader(sock, label) {
        const reader = sock.readable.getReader();
        try {
            let first = true;
            while (true) {
                const { value, done } = await reader.read();
                if (done) break;
                if (closed) break;

                if (!selected) await becomeWinner(sock, label);

                if (first) {
                    sendHeaderIfNeeded();
                    first = false;
                }
                sendToWS(value);
            }
        } catch {
        } finally {
            try { reader.releaseLock(); } catch {}
            if (selected === label && !closed) {
                closed = true;
                safeCloseWebSocket(ws);
            }
        }
    }

    directSock = connect({ hostname: address, port });
    try {
        const w = directSock.writable.getWriter();
        await w.write(initData);
        w.releaseLock();
    } catch {}
    startReader(directSock, 'direct');

    if (RACE_ENABLED && proxyConfig.proxyHost) {
        fallbackTimer = setTimeout(async () => {
            if (selected || closed) return;
            try {
                proxySock = connect({
                    hostname: proxyConfig.proxyHost,
                    port: proxyConfig.proxyPort !== null ? proxyConfig.proxyPort : port,
                });
                const w2 = proxySock.writable.getWriter();
                await w2.write(initData);
                w2.releaseLock();
                startReader(proxySock, 'proxy');
            } catch {
            }
        }, RACE_DELAY_MS);
    }
}

async function handleUDPOutBound(ws, vlHeader) {
    let headerSent = false;

    const transform = new TransformStream({
        transform(chunk, controller) {
            for (let i = 0; i < chunk.byteLength;) {
                const len = new DataView(chunk.buffer, chunk.byteOffset + i, 2).getUint16(0);
                const data = new Uint8Array(chunk.buffer, chunk.byteOffset + i + 2, len);
                controller.enqueue(data);
                i += 2 + len;
            }
        },
    });

    transform.readable.pipeTo(new WritableStream({
        async write(dQuery) {
            const resp = await fetch('https://dns.google/dns-query', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/dns-message',
                    'Accept': 'application/dns-message',
                },
                body: dQuery,
            });
            const ans = await resp.arrayBuffer();
            const sz = ans.byteLength;
            const szBuf = new Uint8Array([(sz >> 8) & 0xff, sz & 0xff]);

            if (ws.readyState === WS_READY_STATE_OPEN) {
                if (!headerSent) { ws.send(vlHeader); headerSent = true; }
                ws.send(szBuf);
                ws.send(ans);
            }
        },
    })).catch(() => { /* 吞掉内部错误 */ });

    const writer = transform.writable.getWriter();
    return {
        write(chunk) {
            writer.write(chunk);
        },
    };
}

const WS_READY_STATE_OPEN = 1;
const WS_READY_STATE_CLOSING = 2;
function safeCloseWebSocket(sock) {
    try {
        if (sock.readyState === WS_READY_STATE_OPEN || sock.readyState === WS_READY_STATE_CLOSING) {
            sock.close();
        }
    } catch { /* ignore */ }
}
